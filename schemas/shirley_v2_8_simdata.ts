/* Code auto-generated by generate_simdata_schema.ts. Do not modify except to apply Prettier. */

import { z } from 'zod';

export const PositionSchema = z
  .object({
    latitudeDeg: z.number().min(-90).max(90).nullable().optional(),
    longitudeDeg: z.number().min(-180).max(180).nullable().optional(),
    aglAltitudeFt: z.number().nullable().optional(),
    mslAltitudeFt: z.number().nullable().optional(),
    indicatedAirspeedKts: z.number().nullable().optional(),
    gpsGroundSpeedKts: z.number().nullable().optional(),
    verticalSpeedFpm: z.number().nullable().optional(),
  })
  .strict();
export type Position = z.infer<typeof PositionSchema>;

export const AttitudeSchema = z
  .object({
    rollAngleDegRight: z.number().min(-180).max(180).nullable().optional(),
    pitchAngleDegUp: z.number().min(-90).max(90).nullable().optional(),
    magneticHeadingDeg: z.number().min(0).max(360).nullable().optional(),
    trueHeadingDeg: z.number().min(0).max(360).nullable().optional(),
    trueGroundTrackDeg: z.number().min(0).max(360).nullable().optional(),
  })
  .strict();
export type Attitude = z.infer<typeof AttitudeSchema>;

export const RadiosNavigationSchema = z
  .object({
    frequencyHz: z.record(z.string(), z.number().min(108000).max(136975)).nullable().optional(),
    standbyFrequencyHz: z
      .record(z.string(), z.number().min(108000).max(136975))
      .nullable()
      .optional(),
    comShouldSwapFrequencies: z.record(z.string(), z.boolean()).nullable().optional(),
    navigationFixes: z.record(z.string(), z.string()).nullable().optional(),
    shouldActivateNavigationToFix: z.boolean().nullable().optional(),
    shirleyPushToTalkIsPressed: z.boolean().nullable().optional(),
    transponderCode: z.number().nullable().optional(),
  })
  .strict();
export type RadiosNavigation = z.infer<typeof RadiosNavigationSchema>;

export const LightsSchema = z
  .object({
    landingLightsSwitchOn: z.boolean().nullable().optional(),
    taxiLightsSwitchOn: z.boolean().nullable().optional(),
    navigationLightsSwitchOn: z.boolean().nullable().optional(),
    strobeLightsSwitchOn: z.boolean().nullable().optional(),
  })
  .strict();
export type Lights = z.infer<typeof LightsSchema>;

export const IndicatorsSchema = z
  .object({
    engineRpm: z.record(z.string(), z.number()).nullable().optional(),
    rotorRpm: z.record(z.string(), z.number()).nullable().optional(),
    propellerRpm: z.record(z.string(), z.number()).nullable().optional(),
    engineN1Percent: z.record(z.string(), z.number()).nullable().optional(),
    manifoldPressureInchesMercury: z.record(z.string(), z.number()).nullable().optional(),
    engineTorqueFtLb: z.record(z.string(), z.number()).nullable().optional(),
    turbineGasTemperatureDegC: z.record(z.string(), z.number()).nullable().optional(),
    engineIttDegC: z.record(z.string(), z.number()).nullable().optional(),
    exhaustGasDegC: z.record(z.string(), z.number()).nullable().optional(),
    lowRotorRPMWarningOn: z.boolean().nullable().optional(),
    totalEnergyVariometerFpm: z.number().nullable().optional(),
    stallWarningOn: z.boolean().nullable().optional(),
    altimeterSettingInchesMercury: z.number().min(24).max(35).nullable().optional(),
  })
  .strict();
export type Indicators = z.infer<typeof IndicatorsSchema>;

export const LeversSchema = z
  .object({
    flapsHandlePercentDown: z.number().min(0).max(100).nullable().optional(),
    speedBrakesHandlePercentDeployed: z.number().min(0).max(100).nullable().optional(),
    landingGearHandlePercentDown: z.number().min(0).max(100).nullable().optional(),
    throttlePercentOpen: z.record(z.string(), z.number().min(-200).max(200)).nullable().optional(),
    collectivePercentUp: z.record(z.string(), z.number().min(0).max(100)).nullable().optional(),
    conditionLeverPercentHigh: z
      .record(z.string(), z.number().min(0).max(100))
      .nullable()
      .optional(),
    mixtureLeverPercentRich: z.record(z.string(), z.number().min(0).max(100)).nullable().optional(),
    carburetorHeatLeverPercentHot: z
      .record(z.string(), z.number().min(0).max(100))
      .nullable()
      .optional(),
    propellerLeverPercentCoarse: z
      .record(z.string(), z.number().min(0).max(100))
      .nullable()
      .optional(),
    propBetaEnabled: z.boolean().nullable().optional(),
  })
  .strict();
export type Levers = z.infer<typeof LeversSchema>;

export const AutopilotSchema = z
  .object({
    isAutopilotEngaged: z.boolean().nullable().optional(),
    isHeadingSelectEnabled: z.boolean().nullable().optional(),
    altitudeMode: z
      .union([
        z.literal('disabled'),
        z.literal('pitch'),
        z.literal('verticalSpeed'),
        z.literal('levelChange'),
        z.literal('altitudeHold'),
        z.literal('terrain'),
        z.literal('glideSlope'),
        z.literal('VNAV'),
        z.literal('TOGA'),
        z.literal('flightPathAngle'),
        z.literal('VNAVSpeed'),
      ])
      .nullable()
      .optional(),
    shouldLevelWings: z.boolean().nullable().optional(),
    magneticHeadingBugDeg: z.number().min(0).max(360).nullable().optional(),
    altitudeBugFt: z.number().min(0).max(70000).nullable().optional(),
  })
  .strict();
export type Autopilot = z.infer<typeof AutopilotSchema>;

export const SystemsSchema = z
  .object({
    batteryOn: z.record(z.string(), z.boolean()).nullable().optional(),
    pitotHeatSwitchOn: z.boolean().nullable().optional(),
    brakesOn: z.boolean().nullable().optional(),
    governorSwitchOn: z.record(z.string(), z.boolean()).nullable().optional(),
    totalEnergyAudioSwitchOn: z.boolean().nullable().optional(),
    propHeatSwitchOn: z.boolean().nullable().optional(),
  })
  .strict();
export type Systems = z.infer<typeof SystemsSchema>;

export const FailuresSchema = z
  .object({
    scheduledAtAltitudeFtAgl: z.record(z.string(), z.number()).nullable().optional(),
    scheduledAtAirspeedKias: z.record(z.string(), z.number()).nullable().optional(),
    isFailed: z.record(z.string(), z.boolean()).nullable().optional(),
  })
  .strict();
export type Failures = z.infer<typeof FailuresSchema>;

export const WeightBalanceSchema = z.object({}).strict();
export type WeightBalance = z.infer<typeof WeightBalanceSchema>;

export const EnvironmentSchema = z
  .object({
    aircraftWindHeadingDeg: z.number().min(0).max(360).nullable().optional(),
    aircraftWindSpeedKts: z.number().nullable().optional(),
    zuluTimeHours: z.number().min(0).max(24).nullable().optional(),
    dayOfYear: z.number().min(0).max(365).nullable().optional(),
    cloudLayerEnabled: z.record(z.string(), z.boolean()).nullable().optional(),
    cloudLayerBasesAltitudeFtMsl: z
      .record(z.string(), z.number().min(0).max(70000))
      .nullable()
      .optional(),
    cloudLayerTopsAltitudeFtMsl: z
      .record(z.string(), z.number().min(0).max(70000))
      .nullable()
      .optional(),
    cloudLayerCoveragePercent: z
      .record(z.string(), z.number().min(0).max(100))
      .nullable()
      .optional(),
    cloudLayerType: z
      .record(
        z.string(),
        z.union([
          z.literal('cirrus'),
          z.literal('stratus'),
          z.literal('cumulus'),
          z.literal('cumulonimbus'),
        ])
      )
      .nullable()
      .optional(),
    windLayerEnabled: z.record(z.string(), z.boolean()).nullable().optional(),
    windLayerAltitudeFt: z.record(z.string(), z.number().min(0).max(70000)).nullable().optional(),
    windLayerDirectionDeg: z.record(z.string(), z.number().min(0).max(360)).nullable().optional(),
    windLayerSpeedKts: z.record(z.string(), z.number()).nullable().optional(),
    windLayerTurbulencePercent: z
      .record(z.string(), z.number().min(0).max(100))
      .nullable()
      .optional(),
    windLayerGustIncreaseKts: z.record(z.string(), z.number()).nullable().optional(),
    visibilityMiles: z.number().nullable().optional(),
    seaLevelPressureInchesMercury: z.number().min(24).max(35).nullable().optional(),
    runwayFriction: z
      .union([
        z.literal('dry'),
        z.literal('lightlyWet'),
        z.literal('wet'),
        z.literal('veryWet'),
        z.literal('lightlyPuddly'),
        z.literal('puddly'),
        z.literal('veryPuddly'),
        z.literal('lightlySnowy'),
        z.literal('snowy'),
        z.literal('verySnowy'),
        z.literal('lightlyIcy'),
        z.literal('icy'),
        z.literal('veryIcy'),
        z.literal('lightlySnowyAndIcy'),
        z.literal('snowyAndIcy'),
        z.literal('verySnowyAndIcy'),
      ])
      .nullable()
      .optional(),
    rainPercent: z.number().min(0).max(100).nullable().optional(),
    groundTemperatureDegC: z.number().nullable().optional(),
    thermalClimbRateFpm: z.number().nullable().optional(),
    weatherEvolution: z
      .union([
        z.literal('improvingRapidly'),
        z.literal('improving'),
        z.literal('improvingSlowly'),
        z.literal('static'),
        z.literal('deterioratingSlowly'),
        z.literal('deteriorating'),
        z.literal('deterioratingRapidly'),
        z.literal('realWorldWeather'),
      ])
      .nullable()
      .optional(),
    shouldUseCurrentWeather: z.boolean().nullable().optional(),
    shouldRegenerateWeather: z.boolean().nullable().optional(),
  })
  .strict();
export type Environment = z.infer<typeof EnvironmentSchema>;

export const InitializationSchema = z.object({}).strict();
export type Initialization = z.infer<typeof InitializationSchema>;

export const SimulationSchema = z
  .object({
    aircraftName: z.string().nullable().optional(),
    isPaused: z.boolean().nullable().optional(),
    simSpeedRatio: z.number().nullable().optional(),
    isCrashed: z.boolean().nullable().optional(),
  })
  .strict();
export type Simulation = z.infer<typeof SimulationSchema>;

export const FreezesSchema = z
  .object({
    positionFreezeEnabled: z.boolean().nullable().optional(),
  })
  .strict();
export type Freezes = z.infer<typeof FreezesSchema>;

export const SimDataSchema = z
  .object({
    position: PositionSchema.optional(),
    attitude: AttitudeSchema.optional(),
    radiosNavigation: RadiosNavigationSchema.optional(),
    lights: LightsSchema.optional(),
    indicators: IndicatorsSchema.optional(),
    levers: LeversSchema.optional(),
    autopilot: AutopilotSchema.optional(),
    systems: SystemsSchema.optional(),
    failures: FailuresSchema.optional(),
    weightBalance: WeightBalanceSchema.optional(),
    environment: EnvironmentSchema.optional(),
    initialization: InitializationSchema.optional(),
    simulation: SimulationSchema.optional(),
    freezes: FreezesSchema.optional(),
  })
  .strict();
export type SimData = z.infer<typeof SimDataSchema>;
