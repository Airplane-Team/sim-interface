/* Code auto-generated by generate_simdata_schema.ts. Do not modify except to apply Prettier. */

import { z } from 'zod';

export const PositionSchema = z
  .object({
    latitudeDeg: z.number().min(-90).max(90).nullable().optional(),
    longitudeDeg: z.number().min(-180).max(180).nullable().optional(),
    aglAltitudeFt: z.number().nullable().optional(),
    mslAltitudeFt: z.number().nullable().optional(),
    indicatedAirspeedKts: z.number().nullable().optional(),
    gpsGroundSpeedKts: z.number().nullable().optional(),
    verticalSpeedFpm: z.number().nullable().optional(),
  })
  .strict();
export type Position = z.infer<typeof PositionSchema>;

export const AttitudeSchema = z
  .object({
    rollAngleDegRight: z.number().min(-180).max(180).nullable().optional(),
    pitchAngleDegUp: z.number().min(-90).max(90).nullable().optional(),
    magneticHeadingDeg: z.number().min(0).max(360).nullable().optional(),
    trueHeadingDeg: z.number().min(0).max(360).nullable().optional(),
  })
  .strict();
export type Attitude = z.infer<typeof AttitudeSchema>;

export const RadiosNavigationSchema = z
  .object({
    frequencyHz: z.record(z.string(), z.number().min(108000).max(136975)).nullable().optional(),
    standbyFrequencyHz: z
      .record(z.string(), z.number().min(108000).max(136975))
      .nullable()
      .optional(),
    comShouldSwapFrequencies: z.record(z.string(), z.boolean()).nullable().optional(),
    navigationFixes: z.record(z.string(), z.string()).nullable().optional(),
    shouldActivateNavigationToFix: z.boolean().nullable().optional(),
    shirleyPushToTalkIsPressed: z.boolean().nullable().optional(),
  })
  .strict();
export type RadiosNavigation = z.infer<typeof RadiosNavigationSchema>;

export const LightsSchema = z
  .object({
    landingLightsSwitchOn: z.boolean().nullable().optional(),
    taxiLightsSwitchOn: z.boolean().nullable().optional(),
    navigationLightsSwitchOn: z.boolean().nullable().optional(),
    strobeLightsSwitchOn: z.boolean().nullable().optional(),
  })
  .strict();
export type Lights = z.infer<typeof LightsSchema>;

export const IndicatorsSchema = z
  .object({
    engineRpm: z.record(z.string(), z.number()).nullable().optional(),
    rotorRpm: z.record(z.string(), z.number()).nullable().optional(),
    propellerRpm: z.record(z.string(), z.number()).nullable().optional(),
    engineN1Percent: z.record(z.string(), z.number()).nullable().optional(),
    manifoldPressureInchesMercury: z.record(z.string(), z.number()).nullable().optional(),
    engineTorqueFtLb: z.record(z.string(), z.number()).nullable().optional(),
    turbineGasTemperatureDegC: z.record(z.string(), z.number()).nullable().optional(),
    engineIttDegC: z.record(z.string(), z.number()).nullable().optional(),
    exhaustGasDegC: z.record(z.string(), z.number()).nullable().optional(),
    lowRotorRPMWarningOn: z.boolean().nullable().optional(),
    totalEnergyVariometerFpm: z.number().nullable().optional(),
    stallWarningOn: z.boolean().nullable().optional(),
  })
  .strict();
export type Indicators = z.infer<typeof IndicatorsSchema>;

export const LeversSchema = z
  .object({
    flapsHandlePercentDown: z.number().min(0).max(100).nullable().optional(),
    speedBrakesHandlePercentDeployed: z.number().min(0).max(100).nullable().optional(),
    landingGearHandlePercentDown: z.number().min(0).max(100).nullable().optional(),
    throttlePercentOpen: z.record(z.string(), z.number().min(-200).max(200)).nullable().optional(),
    collectivePercentUp: z.record(z.string(), z.number().min(0).max(100)).nullable().optional(),
    conditionLeverPercentHigh: z
      .record(z.string(), z.number().min(0).max(100))
      .nullable()
      .optional(),
    mixtureLeverPercentRich: z.record(z.string(), z.number().min(0).max(100)).nullable().optional(),
    propellerLeverPercentCoarse: z
      .record(z.string(), z.number().min(0).max(100))
      .nullable()
      .optional(),
  })
  .strict();
export type Levers = z.infer<typeof LeversSchema>;

export const SystemsSchema = z
  .object({
    batteryOn: z.record(z.string(), z.boolean()).nullable().optional(),
    pitotHeatSwitchOn: z.boolean().nullable().optional(),
    brakesOn: z.boolean().nullable().optional(),
    governorSwitchOn: z.boolean().nullable().optional(),
    totalEnergyAudioSwitchOn: z.boolean().nullable().optional(),
    propHeatSwitchOn: z.boolean().nullable().optional(),
  })
  .strict();
export type Systems = z.infer<typeof SystemsSchema>;

export const FailuresSchema = z
  .object({
    scheduledAtAltitudeFtAgl: z.record(z.string(), z.number()).nullable().optional(),
    scheduledAtAirspeedKias: z.record(z.string(), z.number()).nullable().optional(),
    isFailed: z.record(z.string(), z.boolean()).nullable().optional(),
  })
  .strict();
export type Failures = z.infer<typeof FailuresSchema>;

export const WeightBalanceSchema = z
  .object({
    payloadLbs: z.number().nullable().optional(),
    fuelLbs: z.number().nullable().optional(),
    totalWeightLbs: z.number().nullable().optional(),
  })
  .strict();
export type WeightBalance = z.infer<typeof WeightBalanceSchema>;

export const EnvironmentSchema = z
  .object({
    windHeadingDeg: z.number().min(0).max(360).nullable().optional(),
    windSpeedKts: z.number().nullable().optional(),
    zuluTimeHours: z.number().min(0).max(24).nullable().optional(),
    dayOfYear: z.number().min(0).max(365).nullable().optional(),
    cloudLayerBasesAltitudeFt: z
      .record(z.string(), z.number().min(0).max(70000))
      .nullable()
      .optional(),
    cloudLayerTopsAltitudeFt: z
      .record(z.string(), z.number().min(0).max(70000))
      .nullable()
      .optional(),
    groundAltimeterSettingInchesMercury: z.number().min(24).max(35).nullable().optional(),
    runwayWetnessPercentWet: z.number().min(0).max(100).nullable().optional(),
    groundTemperatureDegC: z.number().nullable().optional(),
    shouldUseCurrentWeatherDateTime: z.boolean().nullable().optional(),
  })
  .strict();
export type Environment = z.infer<typeof EnvironmentSchema>;

export const InitializationSchema = z
  .object({
    airportCode: z.string().nullable().optional(),
    runwayCode: z.string().nullable().optional(),
    finalApproachDistanceNm: z.number().nullable().optional(),
  })
  .strict();
export type Initialization = z.infer<typeof InitializationSchema>;

export const SimulationSchema = z
  .object({
    aircraftName: z.string().nullable().optional(),
    isPaused: z.boolean().nullable().optional(),
    shouldReset: z.boolean().nullable().optional(),
    simSpeed: z.number().nullable().optional(),
    shouldAutoTrim: z.boolean().nullable().optional(),
    isCrashed: z.boolean().nullable().optional(),
  })
  .strict();
export type Simulation = z.infer<typeof SimulationSchema>;

export const FreezesSchema = z
  .object({
    fuelFreezeEnabled: z.boolean().nullable().optional(),
  })
  .strict();
export type Freezes = z.infer<typeof FreezesSchema>;

export const SimDataSchema = z
  .object({
    position: PositionSchema.optional(),
    attitude: AttitudeSchema.optional(),
    radiosNavigation: RadiosNavigationSchema.optional(),
    lights: LightsSchema.optional(),
    indicators: IndicatorsSchema.optional(),
    levers: LeversSchema.optional(),
    systems: SystemsSchema.optional(),
    failures: FailuresSchema.optional(),
    weightBalance: WeightBalanceSchema.optional(),
    environment: EnvironmentSchema.optional(),
    initialization: InitializationSchema.optional(),
    simulation: SimulationSchema.optional(),
    freezes: FreezesSchema.optional(),
  })
  .strict();
export type SimData = z.infer<typeof SimDataSchema>;
