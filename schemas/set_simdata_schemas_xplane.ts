/* Code auto-generated by generate_simdata_schema.ts. Do not modify except to apply Prettier. */

import { z } from 'zod';

export const SetPositionSchema = z
  .object({
    latitudeDeg: z.number().min(-90).max(90).nullable().optional(),
    longitudeDeg: z.number().min(-180).max(180).nullable().optional(),
    aglAltitudeFt: z.number().nullable().optional(),
    indicatedAirspeedKts: z.number().nullable().optional(),
  })
  .strict();
export type SetPosition = z.infer<typeof SetPositionSchema>;

export const SetAttitudeSchema = z
  .object({
    pitchAngleDegUp: z.number().min(-90).max(90).nullable().optional(),
    trueHeadingDeg: z.number().min(0).max(360).nullable().optional(),
  })
  .strict();
export type SetAttitude = z.infer<typeof SetAttitudeSchema>;

export const SetRadiosNavigationSchema = z
  .object({
    standbyFrequencyHz: z
      .record(z.string(), z.number().min(108000).max(136975))
      .nullable()
      .optional(),
    comShouldSwapFrequencies: z.record(z.string(), z.boolean()).nullable().optional(),
    transponderCode: z.number().nullable().optional(),
  })
  .strict();
export type SetRadiosNavigation = z.infer<typeof SetRadiosNavigationSchema>;

export const SetLightsSchema = z
  .object({
    landingLightsSwitchOn: z.boolean().nullable().optional(),
    taxiLightsSwitchOn: z.boolean().nullable().optional(),
    navigationLightsSwitchOn: z.boolean().nullable().optional(),
    strobeLightsSwitchOn: z.boolean().nullable().optional(),
  })
  .strict();
export type SetLights = z.infer<typeof SetLightsSchema>;

export const SetIndicatorsSchema = z
  .object({
    altimeterSettingInchesMercury: z.number().min(24).max(35).nullable().optional(),
  })
  .strict();
export type SetIndicators = z.infer<typeof SetIndicatorsSchema>;

export const SetLeversSchema = z
  .object({
    flapsHandlePercentDown: z.number().min(-100).max(100).nullable().optional(),
    speedBrakesHandlePercentDeployed: z.number().min(-100).max(100).nullable().optional(),
    landingGearHandlePercentDown: z.number().min(0).max(100).nullable().optional(),
    carburetorHeatLeverPercentHot: z
      .record(z.string(), z.number().min(0).max(100))
      .nullable()
      .optional(),
    propBetaEnabled: z.boolean().nullable().optional(),
  })
  .strict();
export type SetLevers = z.infer<typeof SetLeversSchema>;

export const SetAutopilotSchema = z
  .object({
    isAutopilotEngaged: z.boolean().nullable().optional(),
    isFlightDirectorEngaged: z.boolean().nullable().optional(),
    isHeadingSelectEnabled: z.boolean().nullable().optional(),
    altitudeMode: z
      .union([
        z.literal('disabled'),
        z.literal('pitch'),
        z.literal('verticalSpeed'),
        z.literal('levelChange'),
        z.literal('altitudeHold'),
        z.literal('terrain'),
        z.literal('glideSlope'),
        z.literal('VNAV'),
        z.literal('TOGA'),
        z.literal('flightPathAngle'),
        z.literal('VNAVSpeed'),
      ])
      .nullable()
      .optional(),
    targetVerticalSpeedUpFpm: z.number().nullable().optional(),
    shouldLevelWings: z.boolean().nullable().optional(),
    magneticHeadingBugDeg: z.number().min(0).max(360).nullable().optional(),
    altitudeBugFt: z.number().min(0).max(70000).nullable().optional(),
  })
  .strict();
export type SetAutopilot = z.infer<typeof SetAutopilotSchema>;

export const SetSystemsSchema = z
  .object({
    batteryOn: z.record(z.string(), z.boolean()).nullable().optional(),
    pitotHeatSwitchOn: z.boolean().nullable().optional(),
    parkingBrakeOn: z.boolean().nullable().optional(),
    governorSwitchOn: z.record(z.string(), z.boolean()).nullable().optional(),
    totalEnergyAudioSwitchOn: z.boolean().nullable().optional(),
    propHeatSwitchOn: z.boolean().nullable().optional(),
  })
  .strict();
export type SetSystems = z.infer<typeof SetSystemsSchema>;

export const SetFailuresSchema = z
  .object({
    scheduledAtAltitudeFtAgl: z.record(z.string(), z.number()).nullable().optional(),
    scheduledAtAirspeedKias: z.record(z.string(), z.number()).nullable().optional(),
    isFailed: z.record(z.string(), z.boolean()).nullable().optional(),
  })
  .strict();
export type SetFailures = z.infer<typeof SetFailuresSchema>;

export const SetEnvironmentSchema = z
  .object({
    zuluTimeHours: z.number().min(0).max(24).nullable().optional(),
    dayOfYear: z.number().min(0).max(365).nullable().optional(),
    cloudLayerEnabled: z.record(z.string(), z.boolean()).nullable().optional(),
    cloudLayerBasesAltitudeFtMsl: z
      .record(z.string(), z.number().min(0).max(70000))
      .nullable()
      .optional(),
    cloudLayerTopsAltitudeFtMsl: z
      .record(z.string(), z.number().min(0).max(70000))
      .nullable()
      .optional(),
    cloudLayerCoveragePercent: z
      .record(z.string(), z.number().min(0).max(100))
      .nullable()
      .optional(),
    cloudLayerType: z
      .record(
        z.string(),
        z.union([
          z.literal('cirrus'),
          z.literal('stratus'),
          z.literal('cumulus'),
          z.literal('cumulonimbus'),
        ])
      )
      .nullable()
      .optional(),
    windLayerEnabled: z.record(z.string(), z.boolean()).nullable().optional(),
    windLayerAltitudeFt: z.record(z.string(), z.number().min(0).max(70000)).nullable().optional(),
    windLayerDirectionDeg: z.record(z.string(), z.number().min(0).max(360)).nullable().optional(),
    windLayerSpeedKts: z.record(z.string(), z.number()).nullable().optional(),
    windLayerTurbulencePercent: z
      .record(z.string(), z.number().min(0).max(100))
      .nullable()
      .optional(),
    windLayerGustIncreaseKts: z.record(z.string(), z.number()).nullable().optional(),
    visibilityMiles: z.number().nullable().optional(),
    seaLevelPressureInchesMercury: z.number().min(24).max(35).nullable().optional(),
    runwayFriction: z
      .union([
        z.literal('dry'),
        z.literal('lightlyWet'),
        z.literal('wet'),
        z.literal('veryWet'),
        z.literal('lightlyPuddly'),
        z.literal('puddly'),
        z.literal('veryPuddly'),
        z.literal('lightlySnowy'),
        z.literal('snowy'),
        z.literal('verySnowy'),
        z.literal('lightlyIcy'),
        z.literal('icy'),
        z.literal('veryIcy'),
        z.literal('lightlySnowyAndIcy'),
        z.literal('snowyAndIcy'),
        z.literal('verySnowyAndIcy'),
      ])
      .nullable()
      .optional(),
    rainPercent: z.number().min(0).max(100).nullable().optional(),
    groundTemperatureDegC: z.number().nullable().optional(),
    thermalClimbRateFpm: z.number().nullable().optional(),
    weatherEvolution: z
      .union([
        z.literal('improvingRapidly'),
        z.literal('improving'),
        z.literal('improvingSlowly'),
        z.literal('static'),
        z.literal('deterioratingSlowly'),
        z.literal('deteriorating'),
        z.literal('deterioratingRapidly'),
        z.literal('realWorldWeather'),
      ])
      .nullable()
      .optional(),
    shouldUseCurrentWeather: z.boolean().nullable().optional(),
    shouldRegenerateWeather: z.boolean().nullable().optional(),
  })
  .strict();
export type SetEnvironment = z.infer<typeof SetEnvironmentSchema>;

export const SetSimulationSchema = z
  .object({
    isPaused: z.boolean().nullable().optional(),
    simSpeedRatio: z.number().nullable().optional(),
    isCrashed: z.boolean().nullable().optional(),
    shouldResetFlight: z.boolean().nullable().optional(),
  })
  .strict();
export type SetSimulation = z.infer<typeof SetSimulationSchema>;

export const SetFreezesSchema = z
  .object({
    positionFreezeEnabled: z.boolean().nullable().optional(),
  })
  .strict();
export type SetFreezes = z.infer<typeof SetFreezesSchema>;

export const SetSimDataSchema = z
  .object({
    position: SetPositionSchema.optional(),
    attitude: SetAttitudeSchema.optional(),
    radiosNavigation: SetRadiosNavigationSchema.optional(),
    lights: SetLightsSchema.optional(),
    indicators: SetIndicatorsSchema.optional(),
    levers: SetLeversSchema.optional(),
    autopilot: SetAutopilotSchema.optional(),
    systems: SetSystemsSchema.optional(),
    failures: SetFailuresSchema.optional(),
    environment: SetEnvironmentSchema.optional(),
    simulation: SetSimulationSchema.optional(),
    freezes: SetFreezesSchema.optional(),
  })
  .strict();
export type SetSimData = z.infer<typeof SetSimDataSchema>;
